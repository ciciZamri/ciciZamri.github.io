(()=>{"use strict";const t=[{index:0,coords:[1,1],neighbour:[{node:2,weight:1},{node:6,weight:1}]},{index:1,coords:[1,7],neighbour:[{node:9,weight:1}]},{index:2,coords:[1,3],neighbour:[{node:0,weight:1},{node:3,weight:1},{node:9,weight:1}]},{index:3,coords:[5,3],neighbour:[{node:2,weight:1},{node:7,weight:1}]},{index:4,coords:[1,9],neighbour:[{node:5,weight:1},{node:10,weight:1}]},{index:5,coords:[1,11],neighbour:[{node:4,weight:1},{node:11,weight:1}]},{index:6,coords:[5,1],neighbour:[{node:0,weight:1}]},{index:7,coords:[5,7],neighbour:[{node:3,weight:1},{node:17,weight:1}]},{index:8,coords:[3,5],neighbour:[{node:9,weight:1},{node:10,weight:1}]},{index:9,coords:[1,5],neighbour:[{node:2,weight:1},{node:1,weight:1},{node:8,weight:1}]},{index:10,coords:[3,9],neighbour:[{node:4,weight:1},{node:8,weight:1}]},{index:11,coords:[5,11],neighbour:[{node:5,weight:1},{node:12,weight:1}]},{index:12,coords:[5,9],neighbour:[{node:11,weight:1},{node:14,weight:1}]},{index:13,coords:[7,11],neighbour:[{node:15,weight:1}]},{index:14,coords:[11,9],neighbour:[{node:12,weight:1},{node:15,weight:1}]},{index:15,coords:[11,11],neighbour:[{node:13,weight:1},{node:14,weight:1}]},{index:16,coords:[7,1],neighbour:[{node:17,weight:1},{node:19,weight:1}]},{index:17,coords:[7,7],neighbour:[{node:7,weight:1},{node:16,weight:1},{node:18,weight:1}]},{index:18,coords:[11,7],neighbour:[{node:17,weight:1},{node:19,weight:1}]},{index:19,coords:[11,1],neighbour:[{node:16,weight:1},{node:18,weight:1}]}];class e{constructor(t,e){this.x=t,this.y=e}}const i=document.getElementById("canvas").clientWidth,o=new class{constructor(t){this.graph=[],this.nodeList=[],this.createGraph(t)}createGraph(t){for(let e of t)for(let t of e.neighbour)this.addEdge(e.index,t.node,t.weight)}addEdge(t,e,i){if(this.graph.length<=t){for(let e=this.graph.length-1;e<t;e++)this.graph.push([]);this.graph[t].push([e,i])}else this.graph[t].push([e,i])}printGraph(){for(let t=0;t<this.graph.length;t++){console.log(`${t}--\x3e`);for(let e=0;e<this.graph[t].length;e++)console.log(this.graph[t][e])}}findShortestPath(t,e){let i=t,o=[],s=0,n=[];for(let t=0;t<this.graph.length;t++)n.push([1/0,null]),o.push(t);let h=1;for(;o.length>0;){let d=[];for(let t of o)t!==i&&d.push(t);o.splice(0,o.length),o=d;for(let t of this.graph[i])o.includes(t[0])&&s+t[1]<n[t[0]][0]&&(n[t[0]][0]=s+t[1],n[t[0]][1]=i);s+=this.graph[t][0][1];for(let t of o)n[t][0]<=s&&(s=n[t][0],i=t);if(i===e)break;h+=1}let d=n,r=[],a=e;for(;a!=t;)r.push(a),a=d[a][1];return r.push(t),r.reverse(),r}}(t),s=new class{constructor(t,e,i,o){this.gridCount=t,this.width=o,this.obstacleCoordinates=e,this.points=i}co(t){return t/this.gridCount*this.width}drawGrid(){stroke(0),strokeWeight(1);for(let t=1;t<this.width;t++)line(this.co(t),this.co(0),this.co(t),this.co(this.width)),line(this.co(0),this.co(t),this.co(this.width),this.co(t))}drawObstacles(){stroke(0),strokeWeight(18);for(let t=0;t<this.obstacleCoordinates.length;t++)line(this.co(this.obstacleCoordinates[t][0]),this.co(this.obstacleCoordinates[t][1]),this.co(this.obstacleCoordinates[t][2]),this.co(this.obstacleCoordinates[t][3]))}drawPoints(){noStroke(),fill(0),textAlign(CENTER,CENTER),textSize(28);for(let t=0;t<this.points.length;t++)text(`${t}`,this.co(this.points[t][0]),this.co(this.points[t][1]))}}(12,[[6,0,6,6],[2,2,6,2],[2,4,4,4],[4,4,4,10],[4,8,12,8],[4,10,2,10],[8,4,8,2],[8,2,10,2],[0,8,2,8],[2,8,2,6],[6,12,6,10],[6,10,10,10]],t.map((t=>t.coords)),i),n=new class{constructor(){this.controllerButton=document.getElementById("control-btn"),this.isPlaying=!1,this.controllerButton.addEventListener("click",(t=>{const e=parseInt(document.getElementById("start").value),i=parseInt(document.getElementById("end").value);console.log(`${e} -> ${i}`),this.isPlaying=!this.isPlaying,this.controllerButton.innerText=this.isPlaying?"Pause":"Play"}))}pause(){this.isPlaying=!1,this.controllerButton.innerText="Play"}play(){this.isPlaying=!0,this.controllerButton.innerText="Pause"}},h=new class{constructor(t,i){this.position=new e(t.co(t.points[i[0]][0]),t.co(t.points[i[0]][1])),console.log(this.position.y),this.speed=20,this.locationIndex=0,this.targetIndex=0,this.grad=0,this.maze=t,this.sequence=i}computeGrad(t,e,i,o){let s=t-i,n=e-o;return 0===s&&0===n?0:0==s?1/0:0==n?-1/0:Math.abs(s/n)}moveTo(){0!==this.grad&&(this.grad===1/0?this.position.y>this.targetIndex.y?this.position.y-=.1*this.speed:this.position.y+=.1*this.speed:this.grad===-1/0?this.position.x>this.targetIndex.x?this.position.x-=.1*this.speed:this.position.x+=.1*this.speed:(this.position.x>this.targetIndex.x?this.position.x-=.1*this.speed:this.position.x+=.1*this.speed,this.position.y>this.targetIndex.y?this.position.y-=.1*this.speed*1/this.grad:this.position.y+=.1*this.speed*1/this.grad))}moveNext(){this.locationIndex+=1,this.locationIndex!=this.sequence.length&&(this.targetIndex=new e(this.maze.co(this.maze.points[this.sequence[this.locationIndex]][0]),this.maze.co(this.maze.points[this.sequence[this.locationIndex]][1])),this.grad=this.computeGrad(this.maze.co(this.maze.points[this.sequence[this.locationIndex-1]][0]),this.maze.co(this.maze.points[this.sequence[this.locationIndex-1]][1]),this.maze.co(this.maze.points[this.sequence[this.locationIndex]][0]),this.maze.co(this.maze.points[this.sequence[this.locationIndex]][1])))}run(){noStroke(),fill(color(0,0,255)),ellipse(this.position.x,this.position.y,this.maze.co(1),this.maze.co(1)),this.locationIndex!==this.sequence.length&&(this.moveTo(),this.position.x>this.targetIndex.x-5&&this.position.x<this.targetIndex.x+5&&this.position.y>this.targetIndex.y-5&&this.position.y<this.targetIndex.y+5&&(console.log("move"),this.moveNext()))}restart(){this.position.x=this.maze.co(this.maze.points[this.sequence[0]][0]),this.position.y=this.maze.co(this.maze.points[this.sequence[0]][1]),this.locationIndex=0,this.moveNext()}}(s,[6,0,2,9,1]);function d(){h.restart(),clear(),s.drawObstacles(),s.drawPoints(),h.run(),n.pause()}document.getElementById("restart-btn").addEventListener("click",d),document.getElementById("find-btn").addEventListener("click",(t=>{const e=parseInt(document.getElementById("start").value),i=parseInt(document.getElementById("end").value);h.sequence=o.findShortestPath(e,i),document.getElementById("path").innerText=h.sequence.join(" >> "),d()})),window.setup=function(){createCanvas(i,i).parent("canvas"),s.drawObstacles(),s.drawPoints(),h.run(),h.moveNext()},window.draw=function(){n.isPlaying&&(clear(),s.drawObstacles(),s.drawPoints(),h.run())}})();